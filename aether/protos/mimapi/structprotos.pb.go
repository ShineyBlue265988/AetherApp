// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mimapi/structprotos.proto

/*
Package mimapi is a generated protocol buffer package.

It is generated from these files:
	mimapi/structprotos.proto

It has these top-level messages:
	Provable
	Updateable
	BoardOwner
	Board
	Thread
	Post
	Vote
	Key
	Truststate
	Address
	Subprotocol
	Protocol
	Client
*/
package mimapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Provable struct {
	Fingerprint string `protobuf:"bytes,1,opt,name=Fingerprint" json:"Fingerprint,omitempty"`
	Creation    int64  `protobuf:"varint,2,opt,name=Creation" json:"Creation,omitempty"`
	ProofOfWork string `protobuf:"bytes,3,opt,name=ProofOfWork" json:"ProofOfWork,omitempty"`
	Signature   string `protobuf:"bytes,4,opt,name=Signature" json:"Signature,omitempty"`
}

func (m *Provable) Reset()                    { *m = Provable{} }
func (m *Provable) String() string            { return proto.CompactTextString(m) }
func (*Provable) ProtoMessage()               {}
func (*Provable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Provable) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *Provable) GetCreation() int64 {
	if m != nil {
		return m.Creation
	}
	return 0
}

func (m *Provable) GetProofOfWork() string {
	if m != nil {
		return m.ProofOfWork
	}
	return ""
}

func (m *Provable) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type Updateable struct {
	LastUpdate        int64  `protobuf:"varint,1,opt,name=LastUpdate" json:"LastUpdate,omitempty"`
	UpdateProofOfWork string `protobuf:"bytes,2,opt,name=UpdateProofOfWork" json:"UpdateProofOfWork,omitempty"`
	UpdateSignature   string `protobuf:"bytes,3,opt,name=UpdateSignature" json:"UpdateSignature,omitempty"`
}

func (m *Updateable) Reset()                    { *m = Updateable{} }
func (m *Updateable) String() string            { return proto.CompactTextString(m) }
func (*Updateable) ProtoMessage()               {}
func (*Updateable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Updateable) GetLastUpdate() int64 {
	if m != nil {
		return m.LastUpdate
	}
	return 0
}

func (m *Updateable) GetUpdateProofOfWork() string {
	if m != nil {
		return m.UpdateProofOfWork
	}
	return ""
}

func (m *Updateable) GetUpdateSignature() string {
	if m != nil {
		return m.UpdateSignature
	}
	return ""
}

type BoardOwner struct {
	KeyFingerprint string `protobuf:"bytes,1,opt,name=KeyFingerprint" json:"KeyFingerprint,omitempty"`
	Expiry         int64  `protobuf:"varint,2,opt,name=Expiry" json:"Expiry,omitempty"`
	Level          int32  `protobuf:"varint,3,opt,name=Level" json:"Level,omitempty"`
}

func (m *BoardOwner) Reset()                    { *m = BoardOwner{} }
func (m *BoardOwner) String() string            { return proto.CompactTextString(m) }
func (*BoardOwner) ProtoMessage()               {}
func (*BoardOwner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BoardOwner) GetKeyFingerprint() string {
	if m != nil {
		return m.KeyFingerprint
	}
	return ""
}

func (m *BoardOwner) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *BoardOwner) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type Board struct {
	Provable       *Provable     `protobuf:"bytes,1,opt,name=Provable" json:"Provable,omitempty"`
	Name           string        `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	BoardOwners    []*BoardOwner `protobuf:"bytes,3,rep,name=BoardOwners" json:"BoardOwners,omitempty"`
	Description    string        `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
	Owner          string        `protobuf:"bytes,5,opt,name=Owner" json:"Owner,omitempty"`
	OwnerPublicKey string        `protobuf:"bytes,6,opt,name=OwnerPublicKey" json:"OwnerPublicKey,omitempty"`
	EntityVersion  int32         `protobuf:"varint,7,opt,name=EntityVersion" json:"EntityVersion,omitempty"`
	Language       string        `protobuf:"bytes,8,opt,name=Language" json:"Language,omitempty"`
	Meta           string        `protobuf:"bytes,9,opt,name=Meta" json:"Meta,omitempty"`
	RealmId        string        `protobuf:"bytes,10,opt,name=RealmId" json:"RealmId,omitempty"`
	EncrContent    string        `protobuf:"bytes,11,opt,name=EncrContent" json:"EncrContent,omitempty"`
	Updateable     *Updateable   `protobuf:"bytes,12,opt,name=Updateable" json:"Updateable,omitempty"`
}

func (m *Board) Reset()                    { *m = Board{} }
func (m *Board) String() string            { return proto.CompactTextString(m) }
func (*Board) ProtoMessage()               {}
func (*Board) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Board) GetProvable() *Provable {
	if m != nil {
		return m.Provable
	}
	return nil
}

func (m *Board) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Board) GetBoardOwners() []*BoardOwner {
	if m != nil {
		return m.BoardOwners
	}
	return nil
}

func (m *Board) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Board) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Board) GetOwnerPublicKey() string {
	if m != nil {
		return m.OwnerPublicKey
	}
	return ""
}

func (m *Board) GetEntityVersion() int32 {
	if m != nil {
		return m.EntityVersion
	}
	return 0
}

func (m *Board) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Board) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *Board) GetRealmId() string {
	if m != nil {
		return m.RealmId
	}
	return ""
}

func (m *Board) GetEncrContent() string {
	if m != nil {
		return m.EncrContent
	}
	return ""
}

func (m *Board) GetUpdateable() *Updateable {
	if m != nil {
		return m.Updateable
	}
	return nil
}

type Thread struct {
	Provable       *Provable   `protobuf:"bytes,1,opt,name=Provable" json:"Provable,omitempty"`
	Board          string      `protobuf:"bytes,2,opt,name=Board" json:"Board,omitempty"`
	Name           string      `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Body           string      `protobuf:"bytes,4,opt,name=Body" json:"Body,omitempty"`
	Link           string      `protobuf:"bytes,5,opt,name=Link" json:"Link,omitempty"`
	Owner          string      `protobuf:"bytes,6,opt,name=Owner" json:"Owner,omitempty"`
	OwnerPublicKey string      `protobuf:"bytes,7,opt,name=OwnerPublicKey" json:"OwnerPublicKey,omitempty"`
	EntityVersion  int32       `protobuf:"varint,8,opt,name=EntityVersion" json:"EntityVersion,omitempty"`
	Meta           string      `protobuf:"bytes,9,opt,name=Meta" json:"Meta,omitempty"`
	RealmId        string      `protobuf:"bytes,10,opt,name=RealmId" json:"RealmId,omitempty"`
	EncrContent    string      `protobuf:"bytes,11,opt,name=EncrContent" json:"EncrContent,omitempty"`
	Updateable     *Updateable `protobuf:"bytes,12,opt,name=Updateable" json:"Updateable,omitempty"`
}

func (m *Thread) Reset()                    { *m = Thread{} }
func (m *Thread) String() string            { return proto.CompactTextString(m) }
func (*Thread) ProtoMessage()               {}
func (*Thread) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Thread) GetProvable() *Provable {
	if m != nil {
		return m.Provable
	}
	return nil
}

func (m *Thread) GetBoard() string {
	if m != nil {
		return m.Board
	}
	return ""
}

func (m *Thread) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Thread) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Thread) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Thread) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Thread) GetOwnerPublicKey() string {
	if m != nil {
		return m.OwnerPublicKey
	}
	return ""
}

func (m *Thread) GetEntityVersion() int32 {
	if m != nil {
		return m.EntityVersion
	}
	return 0
}

func (m *Thread) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *Thread) GetRealmId() string {
	if m != nil {
		return m.RealmId
	}
	return ""
}

func (m *Thread) GetEncrContent() string {
	if m != nil {
		return m.EncrContent
	}
	return ""
}

func (m *Thread) GetUpdateable() *Updateable {
	if m != nil {
		return m.Updateable
	}
	return nil
}

type Post struct {
	Provable       *Provable   `protobuf:"bytes,1,opt,name=Provable" json:"Provable,omitempty"`
	Board          string      `protobuf:"bytes,2,opt,name=Board" json:"Board,omitempty"`
	Thread         string      `protobuf:"bytes,3,opt,name=Thread" json:"Thread,omitempty"`
	Parent         string      `protobuf:"bytes,4,opt,name=Parent" json:"Parent,omitempty"`
	Body           string      `protobuf:"bytes,5,opt,name=Body" json:"Body,omitempty"`
	Owner          string      `protobuf:"bytes,6,opt,name=Owner" json:"Owner,omitempty"`
	OwnerPublicKey string      `protobuf:"bytes,7,opt,name=OwnerPublicKey" json:"OwnerPublicKey,omitempty"`
	EntityVersion  int32       `protobuf:"varint,8,opt,name=EntityVersion" json:"EntityVersion,omitempty"`
	Meta           string      `protobuf:"bytes,9,opt,name=Meta" json:"Meta,omitempty"`
	RealmId        string      `protobuf:"bytes,10,opt,name=RealmId" json:"RealmId,omitempty"`
	EncrContent    string      `protobuf:"bytes,11,opt,name=EncrContent" json:"EncrContent,omitempty"`
	Updateable     *Updateable `protobuf:"bytes,12,opt,name=Updateable" json:"Updateable,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Post) GetProvable() *Provable {
	if m != nil {
		return m.Provable
	}
	return nil
}

func (m *Post) GetBoard() string {
	if m != nil {
		return m.Board
	}
	return ""
}

func (m *Post) GetThread() string {
	if m != nil {
		return m.Thread
	}
	return ""
}

func (m *Post) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Post) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Post) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Post) GetOwnerPublicKey() string {
	if m != nil {
		return m.OwnerPublicKey
	}
	return ""
}

func (m *Post) GetEntityVersion() int32 {
	if m != nil {
		return m.EntityVersion
	}
	return 0
}

func (m *Post) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *Post) GetRealmId() string {
	if m != nil {
		return m.RealmId
	}
	return ""
}

func (m *Post) GetEncrContent() string {
	if m != nil {
		return m.EncrContent
	}
	return ""
}

func (m *Post) GetUpdateable() *Updateable {
	if m != nil {
		return m.Updateable
	}
	return nil
}

type Vote struct {
	Provable       *Provable   `protobuf:"bytes,1,opt,name=Provable" json:"Provable,omitempty"`
	Board          string      `protobuf:"bytes,2,opt,name=Board" json:"Board,omitempty"`
	Thread         string      `protobuf:"bytes,3,opt,name=Thread" json:"Thread,omitempty"`
	Target         string      `protobuf:"bytes,4,opt,name=Target" json:"Target,omitempty"`
	Owner          string      `protobuf:"bytes,5,opt,name=Owner" json:"Owner,omitempty"`
	OwnerPublicKey string      `protobuf:"bytes,6,opt,name=OwnerPublicKey" json:"OwnerPublicKey,omitempty"`
	TypeClass      int32       `protobuf:"varint,7,opt,name=TypeClass" json:"TypeClass,omitempty"`
	Type           int32       `protobuf:"varint,8,opt,name=Type" json:"Type,omitempty"`
	EntityVersion  int32       `protobuf:"varint,9,opt,name=EntityVersion" json:"EntityVersion,omitempty"`
	Meta           string      `protobuf:"bytes,10,opt,name=Meta" json:"Meta,omitempty"`
	RealmId        string      `protobuf:"bytes,11,opt,name=RealmId" json:"RealmId,omitempty"`
	EncrContent    string      `protobuf:"bytes,12,opt,name=EncrContent" json:"EncrContent,omitempty"`
	Updateable     *Updateable `protobuf:"bytes,13,opt,name=Updateable" json:"Updateable,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Vote) GetProvable() *Provable {
	if m != nil {
		return m.Provable
	}
	return nil
}

func (m *Vote) GetBoard() string {
	if m != nil {
		return m.Board
	}
	return ""
}

func (m *Vote) GetThread() string {
	if m != nil {
		return m.Thread
	}
	return ""
}

func (m *Vote) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Vote) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Vote) GetOwnerPublicKey() string {
	if m != nil {
		return m.OwnerPublicKey
	}
	return ""
}

func (m *Vote) GetTypeClass() int32 {
	if m != nil {
		return m.TypeClass
	}
	return 0
}

func (m *Vote) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Vote) GetEntityVersion() int32 {
	if m != nil {
		return m.EntityVersion
	}
	return 0
}

func (m *Vote) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *Vote) GetRealmId() string {
	if m != nil {
		return m.RealmId
	}
	return ""
}

func (m *Vote) GetEncrContent() string {
	if m != nil {
		return m.EncrContent
	}
	return ""
}

func (m *Vote) GetUpdateable() *Updateable {
	if m != nil {
		return m.Updateable
	}
	return nil
}

type Key struct {
	Provable      *Provable   `protobuf:"bytes,1,opt,name=Provable" json:"Provable,omitempty"`
	Type          string      `protobuf:"bytes,2,opt,name=Type" json:"Type,omitempty"`
	Key           string      `protobuf:"bytes,3,opt,name=Key" json:"Key,omitempty"`
	Expiry        int64       `protobuf:"varint,4,opt,name=Expiry" json:"Expiry,omitempty"`
	Name          string      `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	Info          string      `protobuf:"bytes,6,opt,name=Info" json:"Info,omitempty"`
	EntityVersion int32       `protobuf:"varint,7,opt,name=EntityVersion" json:"EntityVersion,omitempty"`
	Meta          string      `protobuf:"bytes,8,opt,name=Meta" json:"Meta,omitempty"`
	RealmId       string      `protobuf:"bytes,9,opt,name=RealmId" json:"RealmId,omitempty"`
	EncrContent   string      `protobuf:"bytes,10,opt,name=EncrContent" json:"EncrContent,omitempty"`
	Updateable    *Updateable `protobuf:"bytes,11,opt,name=Updateable" json:"Updateable,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Key) GetProvable() *Provable {
	if m != nil {
		return m.Provable
	}
	return nil
}

func (m *Key) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Key) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *Key) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Key) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Key) GetEntityVersion() int32 {
	if m != nil {
		return m.EntityVersion
	}
	return 0
}

func (m *Key) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *Key) GetRealmId() string {
	if m != nil {
		return m.RealmId
	}
	return ""
}

func (m *Key) GetEncrContent() string {
	if m != nil {
		return m.EncrContent
	}
	return ""
}

func (m *Key) GetUpdateable() *Updateable {
	if m != nil {
		return m.Updateable
	}
	return nil
}

type Truststate struct {
	Provable       *Provable   `protobuf:"bytes,1,opt,name=Provable" json:"Provable,omitempty"`
	Target         string      `protobuf:"bytes,2,opt,name=Target" json:"Target,omitempty"`
	Owner          string      `protobuf:"bytes,3,opt,name=Owner" json:"Owner,omitempty"`
	OwnerPublicKey string      `protobuf:"bytes,4,opt,name=OwnerPublicKey" json:"OwnerPublicKey,omitempty"`
	TypeClass      int32       `protobuf:"varint,5,opt,name=TypeClass" json:"TypeClass,omitempty"`
	Type           int32       `protobuf:"varint,6,opt,name=Type" json:"Type,omitempty"`
	Domain         string      `protobuf:"bytes,7,opt,name=Domain" json:"Domain,omitempty"`
	Expiry         int64       `protobuf:"varint,8,opt,name=Expiry" json:"Expiry,omitempty"`
	EntityVersion  int32       `protobuf:"varint,9,opt,name=EntityVersion" json:"EntityVersion,omitempty"`
	Meta           string      `protobuf:"bytes,10,opt,name=Meta" json:"Meta,omitempty"`
	RealmId        string      `protobuf:"bytes,11,opt,name=RealmId" json:"RealmId,omitempty"`
	EncrContent    string      `protobuf:"bytes,12,opt,name=EncrContent" json:"EncrContent,omitempty"`
	Updateable     *Updateable `protobuf:"bytes,13,opt,name=Updateable" json:"Updateable,omitempty"`
}

func (m *Truststate) Reset()                    { *m = Truststate{} }
func (m *Truststate) String() string            { return proto.CompactTextString(m) }
func (*Truststate) ProtoMessage()               {}
func (*Truststate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Truststate) GetProvable() *Provable {
	if m != nil {
		return m.Provable
	}
	return nil
}

func (m *Truststate) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Truststate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Truststate) GetOwnerPublicKey() string {
	if m != nil {
		return m.OwnerPublicKey
	}
	return ""
}

func (m *Truststate) GetTypeClass() int32 {
	if m != nil {
		return m.TypeClass
	}
	return 0
}

func (m *Truststate) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Truststate) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Truststate) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *Truststate) GetEntityVersion() int32 {
	if m != nil {
		return m.EntityVersion
	}
	return 0
}

func (m *Truststate) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *Truststate) GetRealmId() string {
	if m != nil {
		return m.RealmId
	}
	return ""
}

func (m *Truststate) GetEncrContent() string {
	if m != nil {
		return m.EncrContent
	}
	return ""
}

func (m *Truststate) GetUpdateable() *Updateable {
	if m != nil {
		return m.Updateable
	}
	return nil
}

//
// Likely, when we are communicating the address, most of these fields would be empty. Nevertheless, it's good to have it here, and in the future, for some reason we can't predict right now, we might actually need it.
type Address struct {
	Location           string    `protobuf:"bytes,1,opt,name=Location" json:"Location,omitempty"`
	Sublocation        string    `protobuf:"bytes,2,opt,name=Sublocation" json:"Sublocation,omitempty"`
	LocationType       int32     `protobuf:"varint,3,opt,name=LocationType" json:"LocationType,omitempty"`
	Port               int32     `protobuf:"varint,4,opt,name=Port" json:"Port,omitempty"`
	LastSuccessfulPing int64     `protobuf:"varint,5,opt,name=LastSuccessfulPing" json:"LastSuccessfulPing,omitempty"`
	LastSuccessfulSync int64     `protobuf:"varint,6,opt,name=LastSuccessfulSync" json:"LastSuccessfulSync,omitempty"`
	Protocol           *Protocol `protobuf:"bytes,7,opt,name=Protocol" json:"Protocol,omitempty"`
	Client             *Client   `protobuf:"bytes,8,opt,name=Client" json:"Client,omitempty"`
	EntityVersion      int32     `protobuf:"varint,9,opt,name=EntityVersion" json:"EntityVersion,omitempty"`
	RealmId            string    `protobuf:"bytes,10,opt,name=RealmId" json:"RealmId,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Address) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Address) GetSublocation() string {
	if m != nil {
		return m.Sublocation
	}
	return ""
}

func (m *Address) GetLocationType() int32 {
	if m != nil {
		return m.LocationType
	}
	return 0
}

func (m *Address) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Address) GetLastSuccessfulPing() int64 {
	if m != nil {
		return m.LastSuccessfulPing
	}
	return 0
}

func (m *Address) GetLastSuccessfulSync() int64 {
	if m != nil {
		return m.LastSuccessfulSync
	}
	return 0
}

func (m *Address) GetProtocol() *Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *Address) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *Address) GetEntityVersion() int32 {
	if m != nil {
		return m.EntityVersion
	}
	return 0
}

func (m *Address) GetRealmId() string {
	if m != nil {
		return m.RealmId
	}
	return ""
}

type Subprotocol struct {
	Name              string   `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	VersionMajor      int32    `protobuf:"varint,2,opt,name=VersionMajor" json:"VersionMajor,omitempty"`
	VersionMinor      int32    `protobuf:"varint,3,opt,name=VersionMinor" json:"VersionMinor,omitempty"`
	SupportedEntities []string `protobuf:"bytes,4,rep,name=SupportedEntities" json:"SupportedEntities,omitempty"`
}

func (m *Subprotocol) Reset()                    { *m = Subprotocol{} }
func (m *Subprotocol) String() string            { return proto.CompactTextString(m) }
func (*Subprotocol) ProtoMessage()               {}
func (*Subprotocol) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Subprotocol) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subprotocol) GetVersionMajor() int32 {
	if m != nil {
		return m.VersionMajor
	}
	return 0
}

func (m *Subprotocol) GetVersionMinor() int32 {
	if m != nil {
		return m.VersionMinor
	}
	return 0
}

func (m *Subprotocol) GetSupportedEntities() []string {
	if m != nil {
		return m.SupportedEntities
	}
	return nil
}

type Protocol struct {
	VersionMajor int32          `protobuf:"varint,1,opt,name=VersionMajor" json:"VersionMajor,omitempty"`
	VersionMinor int32          `protobuf:"varint,2,opt,name=VersionMinor" json:"VersionMinor,omitempty"`
	Subprotocols []*Subprotocol `protobuf:"bytes,3,rep,name=Subprotocols" json:"Subprotocols,omitempty"`
}

func (m *Protocol) Reset()                    { *m = Protocol{} }
func (m *Protocol) String() string            { return proto.CompactTextString(m) }
func (*Protocol) ProtoMessage()               {}
func (*Protocol) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Protocol) GetVersionMajor() int32 {
	if m != nil {
		return m.VersionMajor
	}
	return 0
}

func (m *Protocol) GetVersionMinor() int32 {
	if m != nil {
		return m.VersionMinor
	}
	return 0
}

func (m *Protocol) GetSubprotocols() []*Subprotocol {
	if m != nil {
		return m.Subprotocols
	}
	return nil
}

type Client struct {
	VersionMajor int32  `protobuf:"varint,1,opt,name=VersionMajor" json:"VersionMajor,omitempty"`
	VersionMinor int32  `protobuf:"varint,2,opt,name=VersionMinor" json:"VersionMinor,omitempty"`
	VersionPatch int32  `protobuf:"varint,3,opt,name=VersionPatch" json:"VersionPatch,omitempty"`
	ClientName   string `protobuf:"bytes,4,opt,name=ClientName" json:"ClientName,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Client) GetVersionMajor() int32 {
	if m != nil {
		return m.VersionMajor
	}
	return 0
}

func (m *Client) GetVersionMinor() int32 {
	if m != nil {
		return m.VersionMinor
	}
	return 0
}

func (m *Client) GetVersionPatch() int32 {
	if m != nil {
		return m.VersionPatch
	}
	return 0
}

func (m *Client) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func init() {
	proto.RegisterType((*Provable)(nil), "structprotos.Provable")
	proto.RegisterType((*Updateable)(nil), "structprotos.Updateable")
	proto.RegisterType((*BoardOwner)(nil), "structprotos.BoardOwner")
	proto.RegisterType((*Board)(nil), "structprotos.Board")
	proto.RegisterType((*Thread)(nil), "structprotos.Thread")
	proto.RegisterType((*Post)(nil), "structprotos.Post")
	proto.RegisterType((*Vote)(nil), "structprotos.Vote")
	proto.RegisterType((*Key)(nil), "structprotos.Key")
	proto.RegisterType((*Truststate)(nil), "structprotos.Truststate")
	proto.RegisterType((*Address)(nil), "structprotos.Address")
	proto.RegisterType((*Subprotocol)(nil), "structprotos.Subprotocol")
	proto.RegisterType((*Protocol)(nil), "structprotos.Protocol")
	proto.RegisterType((*Client)(nil), "structprotos.Client")
}

func init() { proto.RegisterFile("mimapi/structprotos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 969 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x97, 0xcf, 0x8f, 0xe3, 0x34,
	0x14, 0xc7, 0x95, 0xa6, 0xc9, 0xb4, 0xaf, 0x5d, 0x7e, 0x58, 0xa3, 0x2a, 0x8b, 0x56, 0xa8, 0x8a,
	0x10, 0x9a, 0xc3, 0x32, 0x23, 0x0d, 0x17, 0x84, 0xc4, 0x81, 0x99, 0x1d, 0xa4, 0xd5, 0xce, 0xb2,
	0x51, 0x3a, 0x2c, 0x12, 0x37, 0x37, 0xf5, 0x74, 0xc2, 0xa6, 0x71, 0xe4, 0x38, 0x0b, 0x3d, 0x82,
	0x38, 0x70, 0x45, 0x42, 0xe2, 0xca, 0x91, 0xff, 0x80, 0x3f, 0x83, 0x7f, 0x88, 0x03, 0xf2, 0xb3,
	0xd3, 0x38, 0xd3, 0x6e, 0xa7, 0x3b, 0x8c, 0x10, 0x88, 0x53, 0xed, 0xaf, 0x5f, 0x6d, 0xbf, 0xef,
	0xe7, 0xc9, 0x76, 0xe0, 0xfe, 0x22, 0x5d, 0xd0, 0x22, 0x3d, 0x2a, 0xa5, 0xa8, 0x12, 0x59, 0x08,
	0x2e, 0x79, 0x79, 0x88, 0x3f, 0x64, 0x68, 0x6b, 0xe1, 0x8f, 0x0e, 0xf4, 0x22, 0xc1, 0x5f, 0xd2,
	0x69, 0xc6, 0xc8, 0x18, 0x06, 0x9f, 0xa5, 0xf9, 0x9c, 0x89, 0x42, 0xa4, 0xb9, 0x0c, 0x9c, 0xb1,
	0x73, 0xd0, 0x8f, 0x6d, 0x89, 0xbc, 0x03, 0xbd, 0x53, 0xc1, 0xa8, 0x4c, 0x79, 0x1e, 0x74, 0xc6,
	0xce, 0x81, 0x1b, 0xaf, 0xfa, 0xea, 0xdf, 0x91, 0xe0, 0xfc, 0xf2, 0xd9, 0xe5, 0x97, 0x5c, 0xbc,
	0x08, 0x5c, 0xfd, 0x6f, 0x4b, 0x22, 0x0f, 0xa0, 0x3f, 0x49, 0xe7, 0x39, 0x95, 0x95, 0x60, 0x41,
	0x17, 0xc7, 0x1b, 0x21, 0xfc, 0xc1, 0x01, 0xf8, 0xa2, 0x98, 0x51, 0xc9, 0x70, 0x33, 0xef, 0x02,
	0x9c, 0xd3, 0x52, 0x6a, 0x05, 0xf7, 0xe2, 0xc6, 0x96, 0x42, 0x1e, 0xc2, 0xdb, 0xba, 0x65, 0x2f,
	0xda, 0xc1, 0x49, 0xd7, 0x07, 0xc8, 0x01, 0xbc, 0xa9, 0xc5, 0x66, 0x03, 0x7a, 0x83, 0xd7, 0xe5,
	0x70, 0x0a, 0x70, 0xc2, 0xa9, 0x98, 0x3d, 0xfb, 0x26, 0x67, 0x82, 0xbc, 0x0f, 0x6f, 0x3c, 0x61,
	0xcb, 0x75, 0x57, 0xae, 0xa9, 0x64, 0x04, 0xfe, 0xd9, 0xb7, 0x45, 0x2a, 0x96, 0xc6, 0x16, 0xd3,
	0x23, 0xfb, 0xe0, 0x9d, 0xb3, 0x97, 0x2c, 0xc3, 0xd5, 0xbc, 0x58, 0x77, 0xc2, 0xdf, 0x5d, 0xf0,
	0x70, 0x11, 0x72, 0xdc, 0xd8, 0x8f, 0x33, 0x0f, 0x8e, 0x47, 0x87, 0x2d, 0x68, 0xf5, 0x68, 0xdc,
	0x60, 0x22, 0xd0, 0xfd, 0x9c, 0x2e, 0x98, 0x49, 0x16, 0xdb, 0xe4, 0x63, 0x18, 0x34, 0xbb, 0x2e,
	0x03, 0x77, 0xec, 0x1e, 0x0c, 0x8e, 0x83, 0xf6, 0x54, 0x4d, 0x40, 0x6c, 0x07, 0x2b, 0x70, 0x8f,
	0x58, 0x99, 0x88, 0xb4, 0x40, 0xae, 0x1a, 0x8c, 0x2d, 0xa9, 0x2c, 0x30, 0x36, 0xf0, 0x70, 0xcc,
	0x5b, 0x79, 0x83, 0x8d, 0xa8, 0x9a, 0x66, 0x69, 0xf2, 0x84, 0x2d, 0x03, 0x5f, 0x7b, 0xd3, 0x56,
	0xc9, 0x7b, 0x70, 0xef, 0x2c, 0x97, 0xa9, 0x5c, 0x3e, 0x67, 0xa2, 0x54, 0x2b, 0xec, 0xa1, 0x17,
	0x6d, 0x51, 0x95, 0xd6, 0x39, 0xcd, 0xe7, 0x15, 0x9d, 0xb3, 0xa0, 0x87, 0xf3, 0xac, 0xfa, 0x2a,
	0xe3, 0xa7, 0x4c, 0xd2, 0xa0, 0xaf, 0x33, 0x56, 0x6d, 0x12, 0xc0, 0x5e, 0xcc, 0x68, 0xb6, 0x78,
	0x3c, 0x0b, 0x00, 0xe5, 0xba, 0xab, 0xf2, 0x39, 0xcb, 0x13, 0x71, 0xca, 0x73, 0xc9, 0x72, 0x19,
	0x0c, 0x74, 0x3e, 0x96, 0x44, 0x3e, 0xb2, 0x2b, 0x2d, 0x18, 0xa2, 0xef, 0xd7, 0xcc, 0x6a, 0xc6,
	0x63, 0x2b, 0x36, 0xfc, 0xb3, 0x03, 0xfe, 0xc5, 0x95, 0x60, 0xf4, 0x76, 0xe8, 0xf6, 0x0d, 0x77,
	0xc3, 0xce, 0x14, 0x41, 0x0d, 0xd4, 0xb5, 0x80, 0x12, 0xe8, 0x9e, 0xf0, 0xd9, 0xd2, 0xd0, 0xc0,
	0xb6, 0xd2, 0xce, 0xd3, 0xfc, 0x85, 0xa1, 0x80, 0xed, 0x06, 0x8d, 0xbf, 0x1d, 0xcd, 0xde, 0x6e,
	0x68, 0x7a, 0x9b, 0xd0, 0xfc, 0x7b, 0xec, 0xff, 0xde, 0x85, 0x6e, 0xc4, 0x4b, 0x79, 0x87, 0xe6,
	0x8f, 0x6a, 0xa0, 0xc6, 0xfe, 0x1a, 0xef, 0x08, 0xfc, 0x88, 0x0a, 0x95, 0x81, 0x46, 0x60, 0x7a,
	0x2b, 0x30, 0x9e, 0x05, 0xe6, 0xff, 0x05, 0xe1, 0x57, 0x17, 0xba, 0xcf, 0xb9, 0x64, 0xff, 0x0c,
	0x84, 0x0b, 0x2a, 0xe6, 0x6c, 0x05, 0x41, 0xf7, 0xfe, 0xe6, 0x81, 0xf4, 0x00, 0xfa, 0x17, 0xcb,
	0x82, 0x9d, 0x66, 0xb4, 0x2c, 0xcd, 0x61, 0xd4, 0x08, 0xca, 0x68, 0xd5, 0x31, 0x14, 0xb0, 0xbd,
	0x8e, 0xa8, 0xbf, 0x0d, 0x11, 0x6c, 0x46, 0x34, 0xd8, 0x8a, 0x68, 0x78, 0x13, 0xa2, 0x7b, 0xaf,
	0x81, 0xe8, 0x8f, 0x0e, 0xb8, 0x2a, 0xd3, 0x5b, 0x5e, 0x2f, 0x98, 0xbf, 0xb9, 0x5e, 0x30, 0xff,
	0xb7, 0x70, 0x3a, 0x03, 0x07, 0x67, 0x6e, 0x2e, 0xbc, 0x6e, 0xeb, 0xc2, 0xab, 0xcf, 0x32, 0xaf,
	0x7d, 0x96, 0x3d, 0xce, 0x2f, 0xb9, 0xa1, 0x81, 0xed, 0x1d, 0x2f, 0x85, 0xda, 0xd1, 0xde, 0x66,
	0x47, 0xfb, 0x5b, 0x1d, 0x85, 0x9b, 0x1c, 0x1d, 0xbc, 0x86, 0xa3, 0xbf, 0xb9, 0x00, 0x17, 0xa2,
	0x2a, 0x65, 0x29, 0xe9, 0x2d, 0x4b, 0xbf, 0x29, 0xe6, 0xce, 0xe6, 0x62, 0x76, 0xb7, 0x17, 0x73,
	0xf7, 0xe6, 0x62, 0xf6, 0x5e, 0x55, 0xcc, 0xbe, 0x55, 0xcc, 0x23, 0xf0, 0x1f, 0xf1, 0x05, 0x4d,
	0x73, 0x73, 0x1e, 0x99, 0x9e, 0x85, 0xb4, 0xd7, 0x42, 0xfa, 0x5f, 0x2b, 0xfe, 0xef, 0x5c, 0xd8,
	0xfb, 0x74, 0x36, 0x13, 0xac, 0x2c, 0xf1, 0x55, 0xc1, 0x13, 0xfd, 0x60, 0x75, 0xcc, 0xab, 0xc2,
	0xf4, 0xd5, 0x1e, 0x26, 0xd5, 0x34, 0xab, 0x87, 0x35, 0x14, 0x5b, 0x22, 0x21, 0x0c, 0xeb, 0x68,
	0x74, 0x51, 0x3f, 0xe2, 0x5a, 0x9a, 0xca, 0x3b, 0xe2, 0x42, 0x1f, 0x50, 0x5e, 0x8c, 0x6d, 0x72,
	0x08, 0x44, 0xbd, 0x54, 0x27, 0x55, 0x92, 0xb0, 0xb2, 0xbc, 0xac, 0xb2, 0x28, 0xcd, 0xe7, 0x08,
	0xc7, 0x8d, 0x37, 0x8c, 0xac, 0xc7, 0x4f, 0x96, 0x79, 0x82, 0xcc, 0xd6, 0xe2, 0xd5, 0x88, 0xa9,
	0x3e, 0xc9, 0x13, 0x9e, 0x21, 0xc3, 0x4d, 0xd5, 0x87, 0xa3, 0xf1, 0x2a, 0x8e, 0x3c, 0x04, 0xff,
	0x34, 0x4b, 0x95, 0xd9, 0x3d, 0xfc, 0xc7, 0x7e, 0xfb, 0x1f, 0x7a, 0x2c, 0x36, 0x31, 0x3b, 0x32,
	0x7f, 0xe5, 0xfd, 0x13, 0xfe, 0xe2, 0xa0, 0xb9, 0x45, 0xbd, 0x7a, 0x7d, 0x2c, 0x38, 0xd6, 0xb1,
	0x10, 0xc2, 0xd0, 0x4c, 0xf4, 0x94, 0x7e, 0xcd, 0x05, 0x02, 0xf0, 0xe2, 0x96, 0x66, 0xc7, 0xa4,
	0x39, 0x17, 0x35, 0x01, 0x5b, 0x53, 0x5f, 0x02, 0x93, 0xaa, 0x28, 0xb8, 0x90, 0x6c, 0x86, 0xfb,
	0x4b, 0x59, 0x19, 0x74, 0xc7, 0xae, 0xfa, 0x12, 0x58, 0x1b, 0x08, 0x7f, 0x72, 0x1a, 0xf3, 0xd6,
	0xb6, 0xe0, 0xec, 0xb0, 0x85, 0xce, 0x86, 0x2d, 0x7c, 0x02, 0x43, 0x2b, 0xdb, 0xfa, 0xfd, 0x7d,
	0xbf, 0x6d, 0xb1, 0x15, 0x11, 0xb7, 0xc2, 0xc3, 0x9f, 0x9d, 0x1a, 0xce, 0x9d, 0xed, 0xa8, 0x89,
	0x89, 0xa8, 0x4c, 0xae, 0xae, 0x19, 0x87, 0x9a, 0xfa, 0xc4, 0xd2, 0xab, 0x22, 0x1a, 0x7d, 0xbc,
	0x58, 0xca, 0x49, 0xf8, 0xd5, 0x98, 0x32, 0x79, 0xc5, 0xc4, 0x07, 0x09, 0x17, 0xec, 0x48, 0xb7,
	0x8f, 0x74, 0x36, 0x47, 0xfa, 0x0b, 0x73, 0xea, 0x63, 0xf7, 0xc3, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xc7, 0x34, 0xcb, 0x1d, 0x72, 0x0e, 0x00, 0x00,
}
